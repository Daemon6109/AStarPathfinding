{"searchDocs":[{"title":"AStarPathfinding","type":0,"sectionRef":"#","url":"/AStarPathfinding/api/AStarPathfinding","content":"","keywords":"","version":null},{"title":"Functions​","type":1,"pageTitle":"AStarPathfinding","url":"/AStarPathfinding/api/AStarPathfinding#functions","content":" ","version":null,"tagName":"h2"},{"title":"containsNode​","type":1,"pageTitle":"AStarPathfinding","url":"/AStarPathfinding/api/AStarPathfinding#containsNode","content":"&lt;/&gt; AStarPathfinding.containsNode( list: Path,-- The list of nodes to check. node: Node-- The node to check for. ) → boolean-- Whether the list contains the node. Check if a list of nodes contains a specific node. local contains = containsNode(list, node)   ","version":null,"tagName":"h3"},{"title":"getHeuristic​","type":1,"pageTitle":"AStarPathfinding","url":"/AStarPathfinding/api/AStarPathfinding#getHeuristic","content":"&lt;/&gt; AStarPathfinding.getHeuristic( node: Node,-- The node to calculate the heuristic for. endNode: Node-- The end node to calculate the heuristic to. ) → number-- The heuristic value. Get the heuristic (estimated cost) from a node to the end node. This is the Manhattan distance. local heuristic = getHeuristic(node, endNode)  ","version":null,"tagName":"h3"},{"title":"Node","type":0,"sectionRef":"#","url":"/AStarPathfinding/api/Node","content":"","keywords":"","version":null},{"title":"Types​","type":1,"pageTitle":"Node","url":"/AStarPathfinding/api/Node#types","content":" ","version":null,"tagName":"h2"},{"title":"NodeProps​","type":1,"pageTitle":"Node","url":"/AStarPathfinding/api/Node#NodeProps","content":"&lt;/&gt; interface NodeProps { x: number-- The x-coordinate of the node. y: number-- The y-coordinate of the node. walkable: boolean-- Whether the node is walkable or not. } Props for creating a new Node. ","version":null,"tagName":"h3"},{"title":"Functions​","type":1,"pageTitle":"Node","url":"/AStarPathfinding/api/Node#functions","content":" ","version":null,"tagName":"h2"},{"title":"new​","type":1,"pageTitle":"Node","url":"/AStarPathfinding/api/Node#new","content":"&lt;/&gt; Node.new( props: NodeProps-- The properties for the new Node. ) → Node-- The new Node instance. Create a new Node with the given properties. local node = Node.new({ x = 1, y = 1, walkable = true, })   ","version":null,"tagName":"h3"},{"title":"getFCost​","type":1,"pageTitle":"Node","url":"/AStarPathfinding/api/Node#getFCost","content":"&lt;/&gt; Node:getFCost() → number Get the F cost of the node (G cost + H cost). local fCost = node:getFCost()  ","version":null,"tagName":"h3"},{"title":"AStar","type":0,"sectionRef":"#","url":"/AStarPathfinding/api/AStar","content":"","keywords":"","version":null},{"title":"Types​","type":1,"pageTitle":"AStar","url":"/AStarPathfinding/api/AStar#types","content":" ","version":null,"tagName":"h2"},{"title":"AStarProps​","type":1,"pageTitle":"AStar","url":"/AStarPathfinding/api/AStar#AStarProps","content":"&lt;/&gt; interface AStarProps { grid: Grid-- The grid to perform pathfinding on. } Props for creating a new AStar instance. ","version":null,"tagName":"h3"},{"title":"Functions​","type":1,"pageTitle":"AStar","url":"/AStarPathfinding/api/AStar#functions","content":" ","version":null,"tagName":"h2"},{"title":"new​","type":1,"pageTitle":"AStar","url":"/AStarPathfinding/api/AStar#new","content":"&lt;/&gt; AStar.new( props: AStarProps-- The properties for the new AStar instance. ) → AStar-- The new AStar instance. Create a new AStar instance with the given properties. local astar = AStar.new({ grid = grid, })   ","version":null,"tagName":"h3"},{"title":"findPath​","type":1,"pageTitle":"AStar","url":"/AStarPathfinding/api/AStar#findPath","content":"&lt;/&gt; AStar:findPath( startX: number,-- The x-coordinate of the start node. startY: number,-- The y-coordinate of the start node. endX: number,-- The x-coordinate of the end node. endY: number-- The y-coordinate of the end node. ) → Path | nil-- A table of nodes representing the path, or nil if no path was found. Find a path from the start coordinates to the end coordinates using the A* algorithm. local path = astar:findPath(1, 1, 10, 10)  ","version":null,"tagName":"h3"},{"title":"Grid","type":0,"sectionRef":"#","url":"/AStarPathfinding/api/Grid","content":"","keywords":"","version":null},{"title":"Types​","type":1,"pageTitle":"Grid","url":"/AStarPathfinding/api/Grid#types","content":" ","version":null,"tagName":"h2"},{"title":"GridProps​","type":1,"pageTitle":"Grid","url":"/AStarPathfinding/api/Grid#GridProps","content":"&lt;/&gt; interface GridProps { width: number-- The width of the grid. height: number-- The height of the grid. blockProbability: number-- The probability of a node being non-walkable (0-1). } Props for creating a new Grid.  ","version":null,"tagName":"h3"},{"title":"Path​","type":1,"pageTitle":"Grid","url":"/AStarPathfinding/api/Grid#Path","content":"&lt;/&gt; type Path = {Node} Path represents a table of neighboring nodes around a given node. ","version":null,"tagName":"h3"},{"title":"Functions​","type":1,"pageTitle":"Grid","url":"/AStarPathfinding/api/Grid#functions","content":" ","version":null,"tagName":"h2"},{"title":"new​","type":1,"pageTitle":"Grid","url":"/AStarPathfinding/api/Grid#new","content":"&lt;/&gt; Grid.new( props: GridProps-- The properties for the new Grid. ) → Grid-- The new Grid instance. Create a new Grid with the given properties. local grid = Grid.new({ width = 10, height = 10, blockProbability = 0.3, })   ","version":null,"tagName":"h3"},{"title":"getNeighbors​","type":1,"pageTitle":"Grid","url":"/AStarPathfinding/api/Grid#getNeighbors","content":"&lt;/&gt; Grid:getNeighbors( node: Node-- The node to get neighbors for. ) → Path-- A table of neighboring nodes. Get the neighbors of a given node. This includes the nodes above, below, left, right, and diagonally adjacent to the node. local neighbors = grid:getNeighbors(node)   ","version":null,"tagName":"h3"},{"title":"getNode​","type":1,"pageTitle":"Grid","url":"/AStarPathfinding/api/Grid#getNode","content":"&lt;/&gt; Grid:getNode( x: number,-- The x-coordinate of the node. y: number-- The y-coordinate of the node. ) → Node | nil-- The node at the given coordinates, or nil if it does not exist. Get the node at the given coordinates in the grid. local node = grid:getNode(1, 1)   ","version":null,"tagName":"h3"},{"title":"display​","type":1,"pageTitle":"Grid","url":"/AStarPathfinding/api/Grid#display","content":"&lt;/&gt; Grid:display( path: Path?-- An optional path to highlight in the grid. Nodes in the path will be represented by an asterisk (*). ) → () Display the grid in the console. Walkable nodes are represented by a period (.) and non-walkable nodes are represented by a hash (#). If a path is provided, nodes in the path will be represented by an asterisk (*). grid:display()  ","version":null,"tagName":"h3"}],"options":{"id":"default"}}